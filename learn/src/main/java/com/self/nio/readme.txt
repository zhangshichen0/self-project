在本章讲述nio

http://ifeve.com/overview/

channel
buffer
selector

1.传统的通信方式
    bio 阻塞式通信模式
    缺点：
        线程驱动通信业务时，当业务某个环节没有准备好时，线程会出现阻塞---占用浪费资源
        当连接多时，每一个连接占用一个线程，会占用内存和cpu，造成系统资源紧张
        线程过多，会造成cpu频繁的线程上下文切换，且都是无用切换


2.组件
    Channel:信息传输通道，可读可写，支持双向操作，减少50%创建通道的资源，传输速度大大加快
    Buffer:可以讲读写入通道的信息存放在其中
    Selector:注册通信事件的地方，多路复用注册器，netty是在nio基础上扩展，时间驱动模型的框架
    SelectKey:socket事件类型描述 SelectKey包含了-》1.具体来自于哪个Channel 2.通信的具体时间类型

3.总结
    1.NIO是基于事件模型驱动的，大大减少了资源的占用
    2.缓冲区+高速通道是传输数据的能力大大提升
    3.一个线程维护多个客户端处理模型（一个线程维护selector，监听多个客户端发送的事件）

4.netty在nio基础上的改进
    1.线程池维护selector
    2.缓冲区改进（自己实现的）
    3.先进的Reactor线程模型，启动参数确定最终适合系统的运行模式
    4.辅助启动类的构建使用
    5.缓冲区读写模式的切换不需要手动
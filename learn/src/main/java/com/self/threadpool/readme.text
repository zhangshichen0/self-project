线程池介绍-----http://www.365yg.com/item/6520422012748300814/
1.什么是线程池

 池--》池化技术--》缓存架构技术----》jdk设计思想千丝万缕的联系
 池子中放了什么---》同一种类型的对象集合
 线程池--》提供线程执行对象的集合
 OS系统底层线程架构--cpu调度
 java--》创建Thread--》JVM--》调度系统底层资源对象，调度线程运行

2.线程池的组织架构（面向接口的组织架构），已经解决的问题

 Executor的组织架构--ExecutorService-->ThreadPoolExecutor

3.剖析线程池内部的实现原理

 public ThreadPoolExecutor(int corePoolSize,
                               int maximumPoolSize,
                               long keepAliveTime,
                               TimeUnit unit,
                               BlockingQueue<Runnable> workQueue,
                               ThreadFactory threadFactory,
                               RejectedExecutionHandler handler);

 参数说明：
 corePoolSize：线程池中核心线程数量（默认线程数量），线程池对象被创建时，并没有马上创建该数量的线程，当有任务进入时创建并放入线程池内部。
               懒加载：线程资源是非常宝贵的，一旦创建出来就会占用内存、CPU等系统资源，JVM创建一个线程时候，所使用的复合栈大小初始化为0.5M，
                      一个操作系统所能创建的线程数为上千到上万（32bit，64bit，系统限制）

 keepAliveTime：当线程池中的线程数大于corePoolSize时（当线程数<corePoolSize时，该参数无效），当没有执行任务时，线程存活的最大空闲时间

 maximumPoolSize：线程池中最大创建的线程的数量

 workQueue：当线程池中的线程都处于繁忙状态时，将新进入的队列放入阻塞队列中

 handler：饱和策略抽象对象


 处理流程：

  提交任务--》创建核心线程---》核心线程繁忙，放入队列中----》队列满-----》创建线程（<maximumPoolSize），执行新提交的任务
  ------》当线程>=maximumPoolSize时，队列满或者线程都繁忙，则执行饱和策略



4.手动实现一个简单的线程池